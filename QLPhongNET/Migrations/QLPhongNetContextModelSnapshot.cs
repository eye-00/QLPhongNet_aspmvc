// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QLPhongNET.Data;

#nullable disable

namespace QLPhongNET.Migrations
{
    [DbContext(typeof(QLPhongNetContext))]
    partial class QLPhongNetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("QLPhongNET.Models.Computer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CatID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("CatID");

                    b.ToTable("Computers", (string)null);
                });

            modelBuilder.Entity("QLPhongNET.Models.ComputerCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ID");

                    b.ToTable("ComputerCategories", (string)null);
                });

            modelBuilder.Entity("QLPhongNET.Models.DailyRevenue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("TotalRecharge")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("TotalServiceRevenue")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("TotalUsageRevenue")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("ID");

                    b.ToTable("DailyRevenue", (string)null);
                });

            modelBuilder.Entity("QLPhongNET.Models.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("ID");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("QLPhongNET.Models.ServiceUsage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("DailyRevenueID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime>("UsageTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DailyRevenueID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("UserID");

                    b.ToTable("ServiceUsage", (string)null);
                });

            modelBuilder.Entity("QLPhongNET.Models.UsageSession", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ComputerID")
                        .HasColumnType("int");

                    b.Property<int?>("DailyRevenueID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("TotalCost")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ComputerID");

                    b.HasIndex("DailyRevenueID");

                    b.HasIndex("UserID");

                    b.ToTable("UsageSession", (string)null);
                });

            modelBuilder.Entity("QLPhongNET.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("QLPhongNET.Models.Computer", b =>
                {
                    b.HasOne("QLPhongNET.Models.ComputerCategory", "Category")
                        .WithMany("Computers")
                        .HasForeignKey("CatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QLPhongNET.Models.ServiceUsage", b =>
                {
                    b.HasOne("QLPhongNET.Models.DailyRevenue", "DailyRevenue")
                        .WithMany("ServiceUsages")
                        .HasForeignKey("DailyRevenueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QLPhongNET.Models.Service", "Service")
                        .WithMany("ServiceUsages")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QLPhongNET.Models.User", "User")
                        .WithMany("ServiceUsages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DailyRevenue");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QLPhongNET.Models.UsageSession", b =>
                {
                    b.HasOne("QLPhongNET.Models.Computer", "Computer")
                        .WithMany("UsageSessions")
                        .HasForeignKey("ComputerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QLPhongNET.Models.DailyRevenue", "DailyRevenue")
                        .WithMany("UsageSessions")
                        .HasForeignKey("DailyRevenueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QLPhongNET.Models.User", "User")
                        .WithMany("UsageSessions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Computer");

                    b.Navigation("DailyRevenue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QLPhongNET.Models.Computer", b =>
                {
                    b.Navigation("UsageSessions");
                });

            modelBuilder.Entity("QLPhongNET.Models.ComputerCategory", b =>
                {
                    b.Navigation("Computers");
                });

            modelBuilder.Entity("QLPhongNET.Models.DailyRevenue", b =>
                {
                    b.Navigation("ServiceUsages");

                    b.Navigation("UsageSessions");
                });

            modelBuilder.Entity("QLPhongNET.Models.Service", b =>
                {
                    b.Navigation("ServiceUsages");
                });

            modelBuilder.Entity("QLPhongNET.Models.User", b =>
                {
                    b.Navigation("ServiceUsages");

                    b.Navigation("UsageSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
